@startuml

class ToolManager
{
  -setup : SetupManager
  -creator : CreatorManager
  
  +RequestMoveToCreator(saveFile : CharacterSetupMemory) : void
  +RequestRealodTool() : void
}

ToolManager *-- SetupManager
ToolManager *-- CreatorManager
ToolManager *-l- Blackboard

class SetupManager
{
  -onStartRequested : UnityEvent<CharacterSetupMemory>
  
  +NewButtonPressed() : void
  +LoadButtonPressed() : void
}

class CreatorManager
{
  -head : ActiveBodyPart
  -torso : ActiveBodyPart
  -legs : ActiveBodyPart
  ..
  -partCompilation : Dictionary<Options, ActiveBodyPart>
  ..
  -options : OptionFrontMan
  -pictureTaker : PictureTaker
  __
  +OnSaveCommandReceived() : void
  +OnExportCommandReceived() : void
  +OnBackRequestReceived() : void
}

CreatorManager o-- ActiveBodyPart
CreatorManager *-- OptionFrontman
CreatorManager *-- PictureTaker
CreatorManager --> SaveBridge
CreatorManager -l-> Options
SaveBridge --> CharacterSetupMemory

class OptionFrontman
{
  -options : List<OptionHandler>
  
  +Setup(compilation : Dictionary<Options, ActiveBodyPart>) : void
}

class OptionHandler
{
  -linkedPart : ActiveBodyPart
  
  +PullNext() : void
  +PullPrevious() : void
  -OnAttachedPartUpdated(response : SwapCallbackResponse) : void
}

OptionFrontman o-- OptionHandler
OptionHandler *-l- ActiveBodyPart

class OptionQueue <<ScriptableObject>>
{
  -type : Options
  -parts : GameObject[]
  
  +GetFromQueue(index : int) : GameObject
}

class ActiveBodyPart
{
  +type : Options
  +index : int
  ..
  -queue : OptionQueue
  -modelObject : GameObject
  ..
  -onChanged : Action<SwapCallbackResponse>
  
  +SubscribeToCallback(callback : Action<SwapCallbackResponse>) 
  +UnsubscribeFromCallback(callback : Action<SwapCallbackResponse>) 
  +ProcessSwap(index : int) : SwapCallbackResponse
  +ApplyIndex(index : int) : void
}

ActiveBodyPart *-- OptionQueue
ActiveBodyPart --> SwapCallbackResponse

class PictureTaker
{
  -renderTexture : RenderTexture
  
  +TakePicture() : void
}

class Blackboard <<Singleton>>
{
  +loadedSave : CharacterSetupMemory
}

enum Options
{
  Head,
  Torso,
  Legs
}

class CharacterSetupMemory
{
  +savedIndices : Dictionary<Options, int>
}

class SwapCallbackResponse
{
  +part : GameObject
}

class SaveBridge <<Static>>
{
  +SaveTo<T>(objectToSave : T, path : string) : void
  +SaveRawTo<T>(data : byte[], path : string) : void
  +LoadFrom<T>(path : string) : T
}

class RecentSaveTracker <<Static>>
{
    +RegisterRecentSave(location : string) : void
    +GetRegisteredSaves() : List<SaveRegistration>
}

SaveBridge --> RecentSaveTracker

@enduml